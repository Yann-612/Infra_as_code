# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'      # name of the Workflow

on:        #les événements GitHub qui déclencheront l'exécution de ce workflow
  push:        #Indique que le workflow sera déclenché lorsqu'il y a un push (commits) vers le dépôt.  
    branches:  ["main"]       #  vers la branche nommée
  pull_request:        # Indique que le workflow sera également déclenché lorsqu'une pull request est créée ou mise à jour

permissions:      #Définit les permissions accordées au workflow
  contents: read

jobs:      # Définit les tâches (jobs) qui seront exécutées dans ce workflow. Un workflow peut contenir un ou plusieurs jobs qui s'exécutent en parallèle par défaut.
  terraform:      # le nom unique du job
    name: 'Terraform'      #Définit le nom affiché pour ce job
    runs-on: ubuntu-latest      # le runner sur lequel le job va s'executer (ici c'est un runner interne)
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:      # Définit les paramètres par défaut pour toutes les étapes (steps) de ce job
      run:
        shell: bash      #Indique que toutes les commandes exécutées dans les étapes de ce job utiliseront le shell Bash, quel que soit le système d'exploitation du runne

    steps:      # Les étapes s'exécutent séquentiellement dans l'ordre où elles sont définies.
  
    - name: Checkout      #  nom de cette étape
      uses: actions/checkout@v4      # Utilise l'action officielle actions/checkout@v4. Cette action permet de récupérer le code du dépôt sur le runner, pour qu'il puisse travailler avec les fichiers.

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform      # nom de cette étape
      uses: hashicorp/setup-terraform@v2      # Utilise l'action officielle hashicorp/setup-terraform@v1. Cette action installe la dernière version de l'interface de ligne de commande (CLI) Terraform sur le runner.
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init    #nom de cette étape
      run: terraform init    # Execute la commande "terraform init"
      working-directory: .github/workflows/terraform   # Indique le répertoire de travail où la commande sera exécutée. Dans ce cas, c'est le répertoire terraform.

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format      #nom de cette étape
      run: terraform fmt -check     #Cette commande vérifie si les fichiers de configuration Terraform sont correctement formatés selon le style standard. L'option -check fait que la commande échoue si des différences de formatage sont détectées, sans les modifier.
      working-directory: .github/workflows/terraform    # Indique le répertoire de travail où la commande sera exécutée.

    # Generates an execution plan for Terraform
    - name: Terraform Plan      #nom de cette étape
      run: terraform plan -var-file="./path/to/terraform.tfvars"
                          
      #L'option -input=false désactive l'invite pour les valeurs d'entrée interactives.
      working-directory: .github/workflows/terraform    # Indique le répertoire de travail où la commande sera exécutée.

    # On push to "main", build or change infrastructure
    - name: Set Terraform Environment
      run: echo "TF_VAR_some_variable=some_value" >> $GITHUB_ENV

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply      #nom de cette étape
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'  
      #Vérifie que la référence de l'événement (la branche ou le tag qui a déclenché le workflow) est la branche main
      #Vérifie que l'événement qui a déclenché le workflow est un push.
      #&&: Est un opérateur logique "et", donc les deux conditions doivent être vraies pour que l'étape s'exécute.
      run: terraform apply -auto-approve -input=false    #-input=false: Désactive également l'invite pour les valeurs d'entrée interactives.
      working-directory: .github/workflows/terraform    # Indique le répertoire de travail où la commande sera exécutée.