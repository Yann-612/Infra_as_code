name: 'Terraform Azure Pipeline'

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Generate SSH key
        run: |
          ssh-keygen -t rsa -b 4096 -f id_rsa -N ""
          echo "SSH_PUBLIC_KEY=$(cat id_rsa.pub)" >> $GITHUB_ENV
          SSH_PRIVATE_KEY=$(cat id_rsa | base64 | tr -d '\n')
          echo "SSH_PRIVATE_KEY=$SSH_PRIVATE_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: pipeline

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: pipeline

      - name: Terraform Validate
        run: terraform validate
        working-directory: pipeline

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: pipeline
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ssh_public_key: ${{ env.SSH_PUBLIC_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"
        working-directory: pipeline
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ssh_public_key: ${{ env.SSH_PUBLIC_KEY }}

      - name: Get VM Public IP
        id: get_ip
        run: |
          IP=$(terraform -chdir=pipeline output -raw vm_public_ip | tr -d '\n')
          echo "VM_PUBLIC_IP=$IP" >> $GITHUB_ENV
          echo "::set-output name=ip::$IP"

      - name: Générer l'inventaire Ansible complet
        run: |
          echo "[web_server]" > inventory.ini
          echo "vm ansible_host=${VM_PUBLIC_IP} ansible_user=adminuser ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3" >> inventory.ini
        env:
          VM_PUBLIC_IP: ${{ env.VM_PUBLIC_IP }}

      - name: Afficher inventory.ini
        run: cat inventory.ini

      - name: Générer ansible.cfg
        run: |
          echo "[defaults]" > ansible.cfg
          echo "inventory = inventory.ini" >> ansible.cfg
          echo "host_key_checking = False" >> ansible.cfg
          echo "retry_files_enabled = False" >> ansible.cfg

      - name: Run Ansible Playbook
        run: |
          echo "${SSH_PRIVATE_KEY}" | base64 -d > id_rsa
          chmod 600 id_rsa
          ansible-playbook -i inventory.ini -u adminuser --private-key id_rsa AWS/terraform-aws-project/deploy_ansible_httpd_config/install_httpd_fedora.yml
        env:
          VM_PUBLIC_IP: ${{ env.VM_PUBLIC_IP }}
          SSH_PRIVATE_KEY: ${{ env.SSH_PRIVATE_KEY }}

      - name: Debug Pipeline Directory
        run: ls -la pipeline
