name: 'Terraform Azure Pipeline'

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Generate SSH key
        run: |
          ssh-keygen -t rsa -b 4096 -f id_rsa -N ""
          echo "SSH_PUBLIC_KEY=$(cat id_rsa.pub)" >> $GITHUB_ENV
          SSH_PRIVATE_KEY=$(cat id_rsa | base64 | tr -d '\n')
          echo "SSH_PRIVATE_KEY=$SSH_PRIVATE_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init
        working-directory: pipeline

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: pipeline

      - name: Terraform Validate
        run: terraform validate
        working-directory: pipeline

      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars"
        working-directory: pipeline
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ssh_public_key: ${{ env.SSH_PUBLIC_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="terraform.tfvars"
        working-directory: pipeline
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ssh_public_key: ${{ env.SSH_PUBLIC_KEY }}

      - name: Récupérer l'IP publique de la VM
        run: |
          IP=$(terraform output -raw vm_public_ip)
          echo "VM_PUBLIC_IP=$IP" >> $GITHUB_ENV
          cat > inventory.ini <<EOF
[web_servers]
vm ansible_host=$IP ansible_user=adminuser ansible_ssh_private_key_file=~/.ssh/id_rsa ansible_python_interpreter=/usr/bin/python3.10

[web_servers:vars]
ansible_host=$IP
ansible_user=adminuser
ansible_ssh_private_key_file=~/.ssh/id_rsa
ansible_python_interpreter=/usr/bin/python3.10
ansible_port=22
ansible_connection=ssh
ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
EOF
          cat inventory.ini

      - name: Créer la clé privée SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa

      - name: Ajouter la clé SSH à l'agent
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Vérifier la connexion SSH 
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa adminuser@${{ env.VM_PUBLIC_IP }} "echo 'Connexion SSH réussie'"

      - name: Installer les dépendances
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-venv
          pip3 install --upgrade pip setuptools wheel cryptography paramiko
          pip3 install ansible-lint ansible[azure,ssh]

      - name: Générer ansible.cfg
        run: |
          echo "[defaults]" > ansible.cfg
          echo "inventory = inventory.ini" >> ansible.cfg
          echo "host_key_checking = False" >> ansible.cfg
          echo "retry_files_enabled = False" >> ansible.cfg

      - name: Installer Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.ini -u adminuser --private-key ~/.ssh/id_rsa projet_etude/serveur_web_linux/deploy_ansible_httpd_config/install_httpd_fedora.yml

      - name: Debug Pipeline Directory
        run: ls -la pipeline
